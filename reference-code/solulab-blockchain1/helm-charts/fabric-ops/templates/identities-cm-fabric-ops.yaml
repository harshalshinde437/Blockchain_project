{{/*
Copyright National Payments Corporation of India. All Rights Reserved.
SPDX-License-Identifier:  GPL-3.0
*/}}

{{- if eq "identity" .Values.job_type }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-ops.fullname" $ }}-fabric-ops
  labels:
    {{- include "fabric-ops.labels" $ | nindent 4 }}
  annotations:
data:
  fabric_enroll.sh: |
    function fabric_public_key_fetch() {

    FABRIC_CA_URL=$1
    FABRIC_TLS_CERT_FILE=$2

    while true; do
      http_response=$(curl -sL -w  "%{http_code}" "https://$FABRIC_CA_URL/cainfo" --insecure -o /dev/null)
      if [ "$http_response" -eq "200" ]; then
        echo "--------------------------------"
        echo "Fetching public key cert of https://$FABRIC_CA_URL, received HTTP response with 200."
        echo "--------------------------------"
          if curl https://$FABRIC_CA_URL/cainfo --insecure | jq .result.CAChain | base64 -i -d > $FABRIC_TLS_CERT_FILE; then
            echo "--------------------------------"
            echo "The downloaded public key cert of https://$FABRIC_CA_URL"
            echo "--------------------------------"
            cat $FABRIC_TLS_CERT_FILE
            break;
          else
            echo "------------------------------------"
            echo "There are some issues with fetching the public key using 'jq' OR 'curl' command."
            echo "------------------------------------"
          fi
      else
        echo "------------------------------------"
        echo "Fetching public key cert of https://$FABRIC_CA_URL, but received non 200 HTTP response $http_response. This job will retry until it gets 200 response from https://$FABRIC_CA_URL. Cannot proceed without the public key cert. "
        echo "------------------------------------"
        sleep {{ .Values.retry_seconds }}
      fi
    done
    }

    function fabric_enroll() {

    FABRIC_CA_URL=$1
    FABRIC_CA_ADMIN_IDENTITY=$2
    FABRIC_CA_ADMIN_SECRET=$3
    FABRIC_TLS_CERT_FILE=$4

    while true; do
      echo "------------------------------------"
      echo "Enrolling $FABRIC_CA_ADMIN_IDENTITY to $FABRIC_CA_URL"
      echo "------------------------------------"
      fabric-ca-client enroll \
            --url https://$FABRIC_CA_ADMIN_IDENTITY:$FABRIC_CA_ADMIN_SECRET@$FABRIC_CA_URL \
            --mspdir {{ .Values.default_msp_dir }} \
            --tls.certfiles $FABRIC_TLS_CERT_FILE \
            --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }}
      if [ $? -eq 0 ]; then
        echo "------------------------------------"
        echo "Identity $FABRIC_CA_ADMIN_IDENTITY is valid and enrollment is successful."
        echo "--------------------------------------"
        break;
      else
        echo "------------------------------------"
        echo "Cannot login with the given Identity $FABRIC_CA_ADMIN_IDENTITY, will retry in {{ .Values.retry_seconds }} seconds. Meanwhile kindly verify the identities and endpoints."
        echo "------------------------------------"
        rm -rf {{ .Values.default_msp_dir }}
        sleep {{ .Values.retry_seconds }}
      fi
    done
    }
 
    fabric_public_key_fetch $1 {{ .Values.tls_cert_file }}
    fabric_enroll $1 $2 $3 {{ .Values.tls_cert_file }}

  fabric_register_identity.sh: |
      FABRIC_CA_URL=$1
      FABRIC_IDENTITY_NAME=$2
      FABRIC_IDENTITY_SECRET=$3
      FABRIC_IDENTITY_TYPE=$4
      FABRIC_TLS_CERT_FILE={{ .Values.tls_cert_file }}

      registerIdentity () {
        while true; do
          echo "------------------------------------"
          echo "Validating the identity $FABRIC_IDENTITY_NAME at https://$FABRIC_CA_URL" 
          echo "------------------------------------"
          
          fabric-ca-client identity list --id $FABRIC_IDENTITY_NAME -u https://$FABRIC_CA_URL --mspdir {{ .Values.default_msp_dir }} --tls.certfiles $FABRIC_TLS_CERT_FILE
          if [ $? -eq 0 ]; then
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME already exists hence no registration is required."
              echo "------------------------------------"
              break;
            else
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME does not exists. Proceeding to registration at https://$FABRIC_CA_URL"
              echo "------------------------------------"
                fabric-ca-client register -d \
                    --id.name $FABRIC_IDENTITY_NAME \
                    --id.secret $FABRIC_IDENTITY_SECRET \
                    --id.type $FABRIC_IDENTITY_TYPE \
                    --tls.certfiles $FABRIC_TLS_CERT_FILE \
                    --mspdir {{ .Values.default_msp_dir }} \
                    --url https://$FABRIC_CA_URL
              if [ $? -eq 0 ]
                then
                  echo "------------------------------------"
                  echo "Registered identity $FABRIC_IDENTITY_NAME successfully at https://$FABRIC_CA_URL"
                  echo "------------------------------------"
                  break;
                else
                  echo "Previous registration command was not successful and returned a non-zero exit code. Will retry after {{ .Values.retry_seconds }}"
                  sleep {{ .Values.retry_seconds }}
              fi
          fi
        done

      }

      registerIcaIdentity () {
        while true; do
          echo "------------------------------------"
          echo "Validating the identity $FABRIC_IDENTITY_NAME at https://$FABRIC_CA_URL" 
          echo "------------------------------------"
        
          fabric-ca-client identity list --id $FABRIC_IDENTITY_NAME -u https://$FABRIC_CA_URL --mspdir {{ .Values.default_msp_dir }} --tls.certfiles $FABRIC_TLS_CERT_FILE
          if [ $? -eq 0 ]; then
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME already exists hence no registration is required."
              echo "------------------------------------"
              break;
            else
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME does not exists. Proceeding to registration at https://$FABRIC_CA_URL"
              echo "------------------------------------"
                 fabric-ca-client register -d \
                    --id.name $FABRIC_IDENTITY_NAME \
                    --id.secret $FABRIC_IDENTITY_SECRET \
                    --id.attrs '"hf.Registrar.Roles=client,peer,admin,orderer",hf.Revoker=true,hf.IntermediateCA=true' \
                    --tls.certfiles $FABRIC_TLS_CERT_FILE \
                    --mspdir {{ .Values.default_msp_dir }} \
                    --url https://$FABRIC_CA_URL
              if [ $? -eq 0 ]; then
                  echo "------------------------------------"
                  echo "Registered identity $FABRIC_IDENTITY_NAME successfully at https://$FABRIC_CA_URL"
                  echo "------------------------------------"
                  break;
              else
                  echo "Previous registration command was not successful and returned a non-zero exit code. Please check the logs. Will retry after {{ .Values.retry_seconds }}"
                  sleep {{ .Values.retry_seconds }}
              fi
          fi
        done

      }

      registerAdminIdentity () {
        
        ATTRIBUTES="hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"
        while true; do
          echo "------------------------------------"
          echo "Validating the identity $FABRIC_IDENTITY_NAME at https://$FABRIC_CA_URL" 
          echo "------------------------------------"

          fabric-ca-client identity list --id $FABRIC_IDENTITY_NAME -u https://$FABRIC_CA_URL --mspdir {{ .Values.default_msp_dir }} --tls.certfiles $FABRIC_TLS_CERT_FILE
          if [ $? -eq 0 ]; then
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME already exists hence no registration is required."
              echo "------------------------------------"
              break;
            else
              echo "------------------------------------"
              echo "The Identity $FABRIC_IDENTITY_NAME does not exists. Proceeding to registration at https://$FABRIC_CA_URL"
              echo "------------------------------------"
                fabric-ca-client register -d \
                    --id.name $FABRIC_IDENTITY_NAME \
                    --id.secret $FABRIC_IDENTITY_SECRET \
                    --id.type $FABRIC_IDENTITY_TYPE \
                    --id.attrs $ATTRIBUTES \
                    --tls.certfiles $FABRIC_TLS_CERT_FILE \
                    --mspdir {{ .Values.default_msp_dir }} \
                    --url https://$FABRIC_CA_URL
              if [ $? -eq 0 ]
                then
                echo "------------------------------------"
                echo "Registered identity $FABRIC_IDENTITY_NAME successfully at https://$FABRIC_CA_URL"
                echo "------------------------------------"
                break;
              else
                echo "Previous registration command was not successful and returned a non-zero exit code. Please check the logs. Will retry after {{ .Values.retry_seconds }}"
                sleep {{ .Values.retry_seconds }}
              fi
          fi
      done

      }

      case $FABRIC_IDENTITY_TYPE in
        "client"|"peer"|"orderer")
            registerIdentity
          ;;
        "admin")
            registerAdminIdentity
          ;;
        "ica")
            registerIcaIdentity
          ;;
      esac
{{- end }}
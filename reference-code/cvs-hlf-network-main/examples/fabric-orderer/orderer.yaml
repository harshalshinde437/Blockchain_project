# Default values for orderer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: "orderer"
fullnameOverride: ""
project: cvs

orderers:
  - name: orderer0
    identity_name: orderer0-orderer
    identity_secret: orderer0ordererSamplePassword
  - name: orderer1
    identity_name: orderer1-orderer
    identity_secret: orderer1ordererSamplePassword
  - name: orderer2
    identity_name: orderer2-orderer
    identity_secret: orderer2ordererSamplePassword
  - name: orderer3
    identity_name: orderer3-orderer
    identity_secret: orderer3ordererSamplePassword
  - name: orderer4
    identity_name: orderer4-orderer
    identity_secret: orderer4ordererSamplePassword    
csr_names_cn: IN
csr_names_st: Telangana
csr_names_l: Hyderabad
csr_names_o: vivvenns co

filestore_endpoint: http://filestore.filestore.svc
filestore_ssl: false # Make it `true` if `filestore_endpoint` is over https.
block_file: genesis.block
ica_tls_cert_file: /root/cert.pem
enroll_on_every_pod_recreation: true
retry_seconds: 60

hlf_domain: cvs-dev.net
k8s_hlf_domain: orderer.svc
ca:
 ica_endpoint: ica-orderer.orderer.svc:7051
 tlsca_endpoint: tls-ca.orderer.svc:7051

init:
  image:
   repository: 836713645333.dkr.ecr.us-east-2.amazonaws.com/hlf-builder
   tag: 2.5

global:
  containerPort: 7050
  servicePort: 30000
  replicaCount: 1
  image:
    repository: hyperledger/fabric-orderer
    pullPolicy: Always
    imagePullSecrets: []
    tag: "2.5.5"
  serviceAccount:
    annotations: []
  ingress:
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      #nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  storageAccessMode: ReadWriteOnce
  dataStorageSize: "10Gi"
  certStorageSize: "50M"
  storageClass: ebs-sc

  ## Configuration for the Operations Service: https://hyperledger-fabric.readthedocs.io/en/latest/operations_service.html
  operations:
    serviceName: operations
    serviceType: ClusterIP
    servicePort: 8443

  metrics:
    ## Select metrics provider. Possible values are "prometheus", "statsd" or "disabled"
    provider: disabled

    ## Only applicable if provider is "prometheus"
    ## A serviceMonitor will be created for each peer with the configuration provided below
    serviceMonitor:
      enabled: true
      additionalLabels: {}
      namespace: ""

      ## This should be equal to the operations port name
      portName: operations
      scrapeInterval: 30s
      honorLabels: true
      relabelings: []
      metricRelabelings: []

      ## Default: scrape .Release.Namespace only
      ## To scrape all, use the following:
      ## namespaceSelector:
      ##   any: true
      namespaceSelector:
        any: true
      targetLabels: []
    
    ## Configuration for statsd provider
    ## Statsd prefix will be the peer identity name
    statsd:
      network: udp
      address: 127.0.0.1:8125
      writeInterval: 10s

  env:
    - name: FABRIC_LOGGING_SPEC
      value: INFO
    - name: ORDERER_GENERAL_GENESISMETHOD
      value: file
    - name: ORDERER_GENERAL_LISTENADDRESS
      value: 0.0.0.0
    - name: ORDERER_GENERAL_LOCALMSPID
      value: OrdererMSP
    - name: ORDERER_GENERAL_TLS_ENABLED
      value: "true"
    - name: ORDERER_GENERAL_GENESISFILE
      value: "{{ .Values.orderer_cert_base_dir }}/{{ .Values.block_file }}"
    - name: ORDERER_GENERAL_LOCALMSPDIR
      value: "{{ .Values.orderer_cert_base_dir }}/msp"
    - name: ORDERER_GENERAL_TLS_CERTIFICATE
      value: "{{ .Values.orderer_cert_base_dir }}/tls/server.crt"
    - name: ORDERER_GENERAL_TLS_PRIVATEKEY
      value: "{{ .Values.orderer_cert_base_dir }}/tls/server.key"
    - name: ORDERER_GENERAL_TLS_ROOTCAS
      value: "[{{ .Values.orderer_cert_base_dir }}/tls/ca.crt]"
    - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
      value: "{{ .Values.orderer_cert_base_dir }}/tls/server.crt"
    - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
      value: "{{ .Values.orderer_cert_base_dir }}/tls/server.key"
    - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
      value: "[{{ .Values.orderer_cert_base_dir }}/tls/ca.crt]"

podAnnotations: {}
podSecurityContext: {}
securityContext: {}

startupProbe: {}
livenessProbe: {}
readinessProbe: {}

resources: 
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
nodeSelector: {}
tolerations: []
affinity: {}
{{/*
Copyright National Payments Corporation of India. All Rights Reserved.
SPDX-License-Identifier:  GPL-3.0
*/}}

{{- if eq "chaincode_ops" .Values.job_type }}

{{- $Project           := .Values.project }}
{{- $HlfDomain         := .Values.hlf_domain }}
{{- $IcaEndpoint       := .Values.ca.k8s_ca_endpoint }}
{{- $TlsCaEndpoint     := .Values.ca.k8s_tlss_ca_endpoint | default .Values.ca.tlss_ca_endpoint }}
{{- $IcaTlsCertFile    := .Values.ca.ica_tls_certfile | default "/tmp/ca-cert.pem" }}
{{- $TlsCaTlsCertFile  := .Values.ca.ica_tls_certfile | default "/tmp/tlsca-cert.pem" }}
{{- $ChannelName       := .Values.hlf_channel }}
{{- $BankName          := .Values.nameOverride }}
{{- $Msp_base_dir      := printf "%s%s" .Values.workdir "/peer/crypto/users" }}
{{- $k8s_HlfDomain     := .Values.k8s_hlf_domain }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-ops.fullname" $ }}
  labels:
    {{- include "fabric-ops.labels" $ | nindent 4 }}
data:
  config.yaml: |
      NodeOUs:
        Enable: true
        ClientOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: client
        PeerOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: peer
        AdminOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: admin
        OrdererOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: orderer
  fabric_enroll.sh: |
      function fabric_public_key_fetch() {

      FABRIC_CA_URL=$1
      FABRIC_TLS_CERT_FILE=$2

      while true; do
        http_response=$(curl -sL -w  "%{http_code}" "https://$FABRIC_CA_URL/cainfo" --insecure -o /dev/null)
        if [ "$http_response" -eq "200" ]; then
          echo "--------------------------------"
          echo "Fetching public key cert of https://$FABRIC_CA_URL, received HTTP response with 200."
          echo "--------------------------------"
            if curl https://$FABRIC_CA_URL/cainfo --insecure | jq .result.CAChain | base64 -i -d > $FABRIC_TLS_CERT_FILE; then
              echo "--------------------------------"
              echo "The downloaded public key cert of https://$FABRIC_CA_URL"
              echo "--------------------------------"
              cat $FABRIC_TLS_CERT_FILE
              break;
            else
              echo "There are some issues with fetching the public key using 'jq' OR 'curl' command."
            fi
        else
          echo "------------------------------------"
          echo "Fetching public key cert of https://$FABRIC_CA_URL, but received non 200 HTTP response $http_response. Cannot proceed without the public key cert. This process will retry until it gets 200 response from https://$FABRIC_CA_URL."
          echo "------------------------------------"
          sleep {{ .Values.retry_seconds | default 10 }}
        fi
      done
      }

      enroll() {

      FABRIC_ICA_URL={{ $IcaEndpoint }}
      FABRIC_TLS_CA_URL={{ $TlsCaEndpoint }}
      FABRIC_IDENTITY=$1
      FABRIC_IDENTITY_SECRET=$2
      FABRIC_IDENTITY_TYPE=$3
      FABRIC_IDENTITY_MSP_DIR=$4

      if [ $FABRIC_IDENTITY_TYPE = "admin" ] || [ "$IDENTITY_NAME" = "$FABRIC_IDENTITY" ]
        then
          while true; do
            echo "--------------------------------------------------------------------"
            echo "Enrolling to https://$FABRIC_ICA_URL as $FABRIC_IDENTITY"
            echo "--------------------------------------------------------------------"
              fabric-ca-client enroll -d \
                  --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_ICA_URL \
                  --mspdir $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/msp \
                  --tls.certfiles {{ $IcaTlsCertFile }} \
                  --csr.hosts $FABRIC_IDENTITY,$FABRIC_IDENTITY.{{ $HlfDomain }},$FABRIC_IDENTITY.{{ $k8s_HlfDomain }}  \
                  --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }}
            if [ $? -eq 0 ]; then
              echo "=============================== Re-arranging the MSP cert directory ==============================="
              cp $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/msp/intermediatecerts/* $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/msp/intermediatecerts/ca-cert.pem;
              cp /tmp/config.yaml $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/msp/config.yaml;
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Cannot login with the given identity $FABRIC_IDENTITY"
              echo "--------------------------------------------------------------------"
              rm -rf $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/msp
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          done
      else
        echo "--------------------------------------------------------------------"
        echo "ICA enrollment is not required for a different Identity or non admin identity type. Received Identity = $FABRIC_IDENTITY, Type = $FABRIC_IDENTITY_TYPE, Actual Identity = $IDENTITY_NAME, skipping"
        echo "--------------------------------------------------------------------"
      fi  
      sleep 2;

      if [ $FABRIC_IDENTITY_TYPE = "admin" ] || [ "$IDENTITY_NAME" != "$FABRIC_IDENTITY" ]
        then
          echo "--------------------------------------------------------------------"
          echo "TLS enrollment is not required for an admin Identity type, or for a different Identity. Received Identity = $FABRIC_IDENTITY, Type = $FABRIC_IDENTITY_TYPE, Actual Identity = $IDENTITY_NAME, skipping"
          echo "--------------------------------------------------------------------"
        else
          while true; do
            echo "--------------------------------------------------------------------"
            echo "Initiating TLS enrollment as user $FABRIC_IDENTITY to https://$FABRIC_TLS_CA_URL"
            echo "--------------------------------------------------------------------"
              fabric-ca-client enroll -d \
                  --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_TLS_CA_URL \
                  --mspdir $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls \
                  --tls.certfiles {{ $TlsCaTlsCertFile }} \
                  --csr.hosts $FABRIC_IDENTITY,$FABRIC_IDENTITY.{{ $HlfDomain }},$FABRIC_IDENTITY.{{ $k8s_HlfDomain }}  \
                  --enrollment.profile tls \
                  --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }}
            if [ $? -eq 0 ]; then
              echo "========================== Re-arranging the TLS cert directory =================================="
              cp $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/tlscacerts/* $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/ca.crt;
              cp $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/signcerts/* $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/server.crt;
              cp $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/keystore/* $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls/server.key;
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Cannot login with the given identity $FABRIC_IDENTITY"
              echo "--------------------------------------------------------------------"
              rm -rf $FABRIC_IDENTITY_MSP_DIR/$FABRIC_IDENTITY/tls
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          done
      fi
      }
      fabric_public_key_fetch {{ $IcaEndpoint }} {{ $IcaTlsCertFile }}
      fabric_public_key_fetch {{ $TlsCaEndpoint }} {{ $TlsCaTlsCertFile }}
  {{- range .Values.identities }}
      enroll {{ .identity_name }} {{ .identity_secret }} {{ .identity_type }} {{ .msp_base_dir | default $Msp_base_dir }}
  {{- end }}
      echo "========================== Creating directory structure for Orderer =========================="
      mkdir -p $ORDERER_BASE_PATH
      echo "========================== Copying Orderer tls cert =========================="
      cp {{ $TlsCaTlsCertFile }} $ORDERER_BASE_PATH/ca-cert.pem
      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "[SUCCESS]::All enrollment steps have been executed successfully."
      fi
  {{- if .Values.fabric_actions.create_channel | default false }}
  fabric_create_channel.sh: |
      function get_file() {

        file_name=$1
        filestore_download_url=$2
                
        while true; do
          if [ -e "$file_name" ]; then
            echo "--------------------------------------------------------------------"
            echo "File $file_name available. Proceeding to next stage."
            echo "--------------------------------------------------------------------"
            break;
          else
            echo "--------------------------------------------------------------------"
            echo "Atempting to download $file_name from $filestore_download_url"
            echo "--------------------------------------------------------------------"
            if curl --silent --head --fail $filestore_download_url {{- if .Values.filestore_ssl  }} --insecure {{- end }}; then
              echo "--------------------------------------------------------------------"
              echo "Received success http response, downloading $file_name from $filestore_download_url"
              echo "--------------------------------------------------------------------"
              curl $filestore_download_url -o $file_name {{- if .Values.filestore_ssl  }} --insecure {{- end }}
              echo "Received file SHA256 value is = $(sha256sum $file_name)"
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Received non success http response for $file_name, retry in 10 seconds."
              echo "--------------------------------------------------------------------"
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          fi
        done
      }

      get_file {{ $.Values.workdir }}/peer/{{ .Values.config_transaction_filename }} {{ .Values.filestore_endpoint }}/{{ $Project }}/{{ .Values.config_transaction_filename }}
      echo "Printing the downloaded file {{ $.Values.workdir }}/peer/{{ .Values.config_transaction_filename }}"
      cat {{ $.Values.workdir }}/peer/{{ .Values.config_transaction_filename }}

      echo "============================ Creating channel ============================"
      peer channel create -o {{ .Values.orderer_endpoint }} -c {{ $ChannelName }} -f {{ $.Values.workdir }}/peer/{{ .Values.config_transaction_filename }} --tls true --cafile $ORDERER_CA --connTimeout 30s
      echo "============================ Uploading {{ .Values.channel_block_filename }} to Filestore at {{ .Values.filestore_endpoint }} ============================"
      curl -T {{ .Values.channel_block_filename }} {{ .Values.filestore_endpoint }}/{{ $Project }}/ {{- if .Values.filestore_ssl  }} --insecure {{- end }}
      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "[SUCCESS]::All steps have been executed successfully."
      fi
  {{- end }}
  {{- if .Values.fabric_actions.install_chaincode | default false }}
  fabric_install_chaincode.sh: |
      function get_file() {

        file_name=$1
        filestore_download_url=$2
                
        while true; do
          if [ -e "$file_name" ]; then
            echo "--------------------------------------------------------------------"
            echo "File $file_name available. Proceeding to next stage."
            echo "--------------------------------------------------------------------"
            break;
          else
            echo "--------------------------------------------------------------------"
            echo "Atempting to download $file_name from $filestore_download_url"
            echo "--------------------------------------------------------------------"
            if curl --silent --head --fail "$filestore_download_url" {{- if .Values.filestore_ssl  }} --insecure {{- end }}; then
              echo "--------------------------------------------------------------------"
              echo "Received success http response, downloading $file_name from $filestore_download_url"
              echo "--------------------------------------------------------------------"
              curl $filestore_download_url -o $file_name {{- if .Values.filestore_ssl  }} --insecure {{- end }}
              echo "Received file SHA256 value is = $(sha256sum $file_name)"
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Received non success http response for $file_name, retry in 10 seconds."
              echo "--------------------------------------------------------------------"
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          fi
        done
      }

      get_file {{ .Values.channel_block_filename }} {{ .Values.filestore_endpoint }}/{{ $Project }}/{{ .Values.channel_block_filename }}
      get_file {{ .Values.cc_tar_file }} {{ .Values.filestore_endpoint }}/{{ $Project }}/{{ .Values.cc_tar_file }}
      
      
      echo "Listing directory structure before creation."
      echo $PWD
      ls -l
      #CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      echo "============================ Listing the peer joined channels ============================"
      peer channel list
      peer channel list | grep {{ $ChannelName }}
      if [ $? -ne 0 ]; then
        echo "The peer has not joined {{ $ChannelName }} channel yet."
        echo "============================ Joining channel ============================"
        peer channel join -b {{ .Values.channel_block_filename }} --connTimeout 30s        
      else
        echo "Peer has already joined {{ $ChannelName }} channel."
      fi
      
      echo "============================ Installing ChainCode version {{ .Values.cc_tar_file }} ============================"
      sha256sum {{ .Values.cc_tar_file }}
      peer lifecycle chaincode install {{ .Values.cc_tar_file }} --connTimeout 120s 
      echo "============================ Print ChainCode installation status ============================"
      peer lifecycle chaincode queryinstalled --connTimeout 10s
      sleep 100000


  {{- end }}
  {{- if .Values.fabric_actions.approve_chaincode }}
  fabric_approve_chaincode.sh: |
      function get_file() {

        file_name=$1
        filestore_download_url=$2
                
        while true; do
          if [ -e "$file_name" ]; then
            echo "--------------------------------------------------------------------"
            echo "File $file_name available. Proceeding to next stage."
            echo "--------------------------------------------------------------------"
            break;
          else
            echo "--------------------------------------------------------------------"
            echo "Atempting to download $file_name from $filestore_download_url"
            echo "--------------------------------------------------------------------"
            if curl --silent --head --fail "$filestore_download_url" {{- if .Values.filestore_ssl  }} --insecure {{- end }}; then
              echo "--------------------------------------------------------------------"
              echo "Received success http response, downloading $file_name from $filestore_download_url"
              echo "--------------------------------------------------------------------"
              curl $filestore_download_url -o $file_name {{- if .Values.filestore_ssl  }} --insecure {{- end }}
              echo "Received file SHA256 value is = $(sha256sum $file_name)"
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Received non success http response for $file_name, retry in 10 seconds."
              echo "--------------------------------------------------------------------"
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          fi
        done
      }

      CC_PACKAGE_ID={{ .Values.cc_package_id }}
      CC_NAME={{ .Values.cc_name }}
      CC_VERSION={{ .Values.cc_version  }}
      SEQ={{ .Values.seq }}

      {{- if .Values.require_collection_config }}

      COLLECTION_CONFIG_SHA_VALUE="{{ .Values.collection_config_file_hash }}"
      COLLECTION_CONFIG_FILE_NAME="{{ $.Values.workdir }}/peer/collection-config.json"

      get_file $COLLECTION_CONFIG_FILE_NAME {{ .Values.filestore_endpoint }}/{{ $Project }}/{{ .Values.collection_config_file }}

      echo "Displaying downloaded collection config"
      echo "--------------------------------------------------------------"
      cat {{ $.Values.workdir }}/peer/collection-config.json
      echo "--------------------------------------------------------------"  
      echo "Checking the SHA256 value of downloaded collection-config.json"
      echo "--------------------------------------------------------------"
      
      get_sha256=$(sha256sum $COLLECTION_CONFIG_FILE_NAME | awk {'print $1'})
      echo "SHA256 value of the downloaded file is = $get_sha256"
      echo "SHA256 value from helm is              = $COLLECTION_CONFIG_SHA_VALUE"
      echo "--------------------------------------------------------------"

      if [ "$get_sha256"  = "$COLLECTION_CONFIG_SHA_VALUE" ]; then
         echo "Downloaded collection-config's SHA is matching. Proceeding to approval process."
         echo "Appproving ChainCode with Package ID = $CC_PACKAGE_ID, Version = $CC_VERSION, Name = $CC_NAME, Seq = $SEQ"
         peer lifecycle chaincode approveformyorg -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --package-id $CC_PACKAGE_ID --sequence $SEQ --collections-config {{ $.Values.workdir }}/peer/collection-config.json --tls --cafile $ORDERER_CA --connTimeout 60s
          if [ $? -ne 0 ]; then
           echo "========================================= [ERROR] =============================================="
           echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
          else
           echo "========================================= [SUCCESS] =============================================="
           echo "Checking the Aproval status for Comitreadiness for the package name = $CC_NAME"
           sleep 2
           peer lifecycle chaincode checkcommitreadiness -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --sequence $SEQ --collections-config {{ $.Values.workdir }}/peer/collection-config.json --tls --cafile $ORDERER_CA --output json  --connTimeout 60s
           echo "[SUCCESS]::All steps have been executed successfully."
          fi
      else
         echo "Downloaded collection-config's SHA is not matching. Aborting the approval process. You may want to check the helm values or the actual file in the filestore"
      fi
      {{- end }}

      {{- if not .Values.require_collection_config }}
      echo "Appproving ChainCode with Package ID = $CC_PACKAGE_ID, Version = $CC_VERSION, Name = $CC_NAME, Seq = $SEQ"
      peer lifecycle chaincode approveformyorg -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --package-id $CC_PACKAGE_ID --sequence $SEQ --tls --cafile $ORDERER_CA --connTimeout 60s
      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "Checking the Aproval status for Comitreadiness for the package name = $CC_NAME"
        sleep 2
        peer lifecycle chaincode checkcommitreadiness -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --sequence $SEQ --tls --cafile $ORDERER_CA --output json --connTimeout 60s
        echo "[SUCCESS]::All steps have been executed successfully."
      fi
      {{- end }}
      sleep 100000
  {{- end }}
  {{- if .Values.fabric_actions.configure_org_channel | default false }}
  {{- range .Values.organizatons }}
  configtx_{{ .name }}.yaml: |
      Organizations:
        - &{{ .name }}
          Name: {{ .name }}
          ID: {{ .name }}
          MSPDir: {{ .msp_dir | default "/crypto-config/peerOrganizations/msp" }}
          Policies:
            Readers:
              Type: Signature
              Rule: "OR('{{ .name }}.admin', '{{ .name }}.peer', '{{ .name }}.client')"
            Writers:
              Type: Signature
              Rule: "OR('{{ .name }}.admin', '{{ .name }}.client')"
            Admins:
              Type: Signature
              Rule: "OR('{{ .name }}.admin')"
            Endorsement:
              Type: Signature
              Rule: "OR('{{ .name }}.peer')"
          AnchorPeers:
            - Host: {{ .anchor_peer }}
              Port: {{ .anchor_peer_port }}
  {{- end }}
  fabric_configure_org_channel.sh: |

      ORG_NAME=$1
      FABRIC_CA_URL=$2
      FABRIC_IDENTITY=$3
      FABRIC_IDENTITY_SECRET=$4
      FABRIC_IDENTITY_MSP_DIR=$5
      FABRIC_TLS_CERT_FILE=/tmp/$ORG_NAME-cert.pem

      function fabric_public_key_fetch() {

      FABRIC_CA_URL=$1
      FABRIC_TLS_CERT_FILE=$2

      while true; do
        http_response=$(curl -sL -w  "%{http_code}" "https://$FABRIC_CA_URL/cainfo" --insecure -o /dev/null)
        if [ "$http_response" -eq "200" ]; then
          echo "--------------------------------"
          echo "Fetching public key cert of https://$FABRIC_CA_URL, received HTTP response with 200."
          echo "--------------------------------"
            if curl https://$FABRIC_CA_URL/cainfo --insecure | jq .result.CAChain | base64 -i -d > $FABRIC_TLS_CERT_FILE; then
              echo "--------------------------------"
              echo "The downloaded public key cert of https://$FABRIC_CA_URL"
              echo "--------------------------------"
              cat $FABRIC_TLS_CERT_FILE
              break;
            else
              echo "There are some issues with fetching the public key using 'jq' OR 'curl' command."
            fi
        else
          echo "------------------------------------"
          echo "Fetching public key cert of https://$FABRIC_CA_URL, but received non 200 HTTP response $http_response. Cannot proceed without the public key cert. This process will retry until it gets 200 response from https://$FABRIC_CA_URL."
          echo "------------------------------------"
          sleep {{ .Values.retry_seconds | default 10 }}
        fi
      done
      }

      fabric_public_key_fetch $FABRIC_CA_URL $FABRIC_TLS_CERT_FILE

      echo "============================ Updating channel for $ORG_NAME ============================"
      echo "------------------------------------"
      echo "Enrolling to ICA https://$FABRIC_CA_URL as $FABRIC_IDENTITY"
      echo "--------------------------------------------------------------------"
      while true; do
        fabric-ca-client enroll \
          --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_CA_URL \
          --mspdir $FABRIC_IDENTITY_MSP_DIR \
          --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }} \
          --tls.certfiles $FABRIC_TLS_CERT_FILE
        
        if [ $? -eq 0 ]; then
          mkdir $FABRIC_IDENTITY_MSP_DIR/tlscacerts
          cp -pr $FABRIC_IDENTITY_MSP_DIR/intermediatecerts/* $FABRIC_IDENTITY_MSP_DIR/intermediatecerts/ca-cert.pem
          cp -pr $FABRIC_IDENTITY_MSP_DIR/cacerts/* $FABRIC_IDENTITY_MSP_DIR/cacerts/ca-cert.pem      
          cp {{ $TlsCaTlsCertFile }} $FABRIC_IDENTITY_MSP_DIR/tlscacerts/ca.crt
          cp /tmp/config.yaml $FABRIC_IDENTITY_MSP_DIR/config.yaml
          echo "------------------------------------"   
          echo "Displaying the msp dir directory $FABRIC_IDENTITY_MSP_DIR structure after rearrangements."
          echo "------------------------------------"
          find $FABRIC_IDENTITY_MSP_DIR/ -type f
          break;
        else
          echo "------------------------------------"
          echo "Cannot login with the given identity $FABRIC_IDENTITY"
          echo "------------------------------------"
          rm -rf $FABRIC_IDENTITY_MSP_DIR/*
          sleep {{ .Values.retry_seconds  | default 10 }}
        fi
      done
      
      echo "============================ Generating org material for $ORG_NAME ============================"
      configtxgen -configPath {{ $.Values.workdir }}/peer -printOrg $ORG_NAME > $ORG_NAME.json
      echo "============================ Fetching config block ============================"
      peer channel fetch config config_block.pb -o {{ .Values.orderer_endpoint }} -c {{ $ChannelName }} --tls --cafile $ORDERER_CA --connTimeout 10s
      echo "============================ Converting the configuration to JSON ============================"
      configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config.json
      echo "============================ Add the new Org $ORG_NAME crypto material ============================"
      jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"'${ORG_NAME}'":.[1]}}}}}' config.json $ORG_NAME.json > modified_config.json
      configtxlator proto_encode --input config.json --type common.Config --output config.pb
      configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb
      sleep 3     
      configtxlator compute_update --channel_id {{ $ChannelName }} --original config.pb --updated modified_config.pb --output org3_update.pb
      configtxlator proto_decode --input org3_update.pb --type common.ConfigUpdate | jq . > org3_update.json
      echo '{"payload":{"header":{"channel_header":{"channel_id":"{{ $ChannelName }}", "type":2}},"data":{"config_update":'$(cat org3_update.json)'}}}' | jq . > org3_update_in_envelope.json
      configtxlator proto_encode --input org3_update_in_envelope.json --type common.Envelope --output org3_update_in_envelope.pb
      echo "============================ Signing the Channel Configuration Update ============================"
      peer channel signconfigtx -f org3_update_in_envelope.pb --connTimeout 30s
      echo "============================ Updating Channel configuration ============================"
      peer channel update -f org3_update_in_envelope.pb -c {{ $ChannelName }} -o {{ .Values.orderer_endpoint }} --tls --cafile $ORDERER_CA --connTimeout 30s
      sleep 60
      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "[SUCCESS]::All steps have been executed successfully."
      fi
  {{- end }}
  {{- if .Values.fabric_actions.commit_chaincode }}
  fabric_commit_chaincode.sh: |
      function get_file() {

        file_name=$1
        filestore_download_url=$2
                
        while true; do
          if [ -e "$file_name" ]; then
            echo "--------------------------------------------------------------------"
            echo "File $file_name available. Proceeding to next stage."
            echo "--------------------------------------------------------------------"
            break;
          else
            echo "--------------------------------------------------------------------"
            echo "Atempting to download $file_name from $filestore_download_url"
            echo "--------------------------------------------------------------------"
            if curl --silent --head --fail "$filestore_download_url" {{- if .Values.filestore_ssl  }} --insecure {{- end }}; then
              echo "--------------------------------------------------------------------"
              echo "Received success http response, downloading $file_name from $filestore_download_url"
              echo "--------------------------------------------------------------------"
              curl $filestore_download_url -o $file_name {{- if .Values.filestore_ssl  }} --insecure {{- end }}
              echo "Received file SHA256 value is = $(sha256sum $file_name)"
              break;
            else
              echo "--------------------------------------------------------------------"
              echo "Received non success http response for $file_name, retry in 10 seconds."
              echo "--------------------------------------------------------------------"
              sleep {{ .Values.retry_seconds  | default 10 }}
            fi
          fi
        done
      }

      CC_NAME={{ .Values.cc_name }}
      CC_VERSION={{ .Values.cc_version }}
      SEQ={{ .Values.seq }}

      {{- if .Values.require_collection_config }}

      COLLECTION_CONFIG_SHA_VALUE="{{ .Values.collection_config_file_hash }}"
      COLLECTION_CONFIG_FILE_NAME="{{ $.Values.workdir }}/peer/collection-config.json"

      get_file $COLLECTION_CONFIG_FILE_NAME {{ .Values.filestore_endpoint }}/{{ $Project }}/{{ .Values.collection_config_file }}
      echo "Displaying downloaded collection config"
      echo "--------------------------------------------------------------"
      cat {{ $.Values.workdir }}/peer/collection-config.json    
      echo "--------------------------------------------------------------"  
      echo "Checking the SHA256 value of downloaded collection-config.json"
      echo "--------------------------------------------------------------"
      
      get_sha256=$(sha256sum $COLLECTION_CONFIG_FILE_NAME | awk {'print $1'})
      echo "SHA256 value of the downloaded file is = $get_sha256"
      echo "SHA256 value from helm is              = $COLLECTION_CONFIG_SHA_VALUE"
      echo "--------------------------------------------------------------"

      if [ "$get_sha256"  = "$COLLECTION_CONFIG_SHA_VALUE" ]; then
         echo "Downloaded collection-config's SHA is matching. Proceeding to the CC commit process."
         echo "Committing ChainCode with Package ID = $CC_PACKAGE_ID, Version = $CC_VERSION, Name = $CC_NAME, Seq = $SEQ"
         peer lifecycle chaincode commit -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --sequence $SEQ --collections-config {{ $.Values.workdir }}/peer/collection-config.json --tls --cafile $ORDERER_CA --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --connTimeout 10s
          if [ $? -ne 0 ]; then
           echo "========================================= [ERROR] =============================================="
           echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
          else
           echo "========================================= [SUCCESS] =============================================="
           echo "Checking the committed status for the package name = $CC_NAME"
           sleep 2
           peer lifecycle chaincode querycommitted -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --tls --cafile $ORDERER_CA --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --connTimeout 10s
           echo "[SUCCESS]::All steps have been executed successfully."
          fi
      else
         echo "Downloaded collection-config's SHA is not matching. Aborting the commit process. You may want to check the helm values or the actual file in the filestore"
      fi
      {{- end }}

      {{- if not .Values.require_collection_config }}
      echo "Committing ChainCode with Package ID = $CC_PACKAGE_ID, Version = $CC_VERSION, Name = $CC_NAME, Seq = $SEQ"
      peer lifecycle chaincode commit -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --version $CC_VERSION --sequence $SEQ --tls --cafile $ORDERER_CA --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --connTimeout 10s

      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "Checking the committed status for the package name = $CC_NAME"
        sleep 2
        peer lifecycle chaincode querycommitted -o {{ .Values.orderer_endpoint }} --channelID {{ $ChannelName }} --name $CC_NAME --tls --cafile $ORDERER_CA --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --connTimeout 10s
        echo "[SUCCESS]::All steps have been executed successfully."
      fi
      {{- end }}
  {{- end }}
  {{- if .Values.fabric_actions.update_anchor_peer | default false }}
  fabric_update_anchorpeer.sh: |
      echo "============================ Starting anchor peer update ============================"
      echo "============================ Fetching config block ============================"
      peer channel fetch config config_block.pb -o {{ .Values.orderer_endpoint }} -c {{ $ChannelName }} --tls --cafile $ORDERER_CA --connTimeout 60s
      echo "============================ Converting the configuration to JSON ============================"
      configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config.json
      echo "============================ Add the anchor peer configs ============================"
      jq --argjson hostList "$(cat anchorpeer.json)" '.channel_group.groups.Application.groups.{{ $BankName }}.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": $hostList},"version": "0"}}' config.json > modified_config.json
      echo "Executing configtxlator commands"
      echo "============================ Executing - configtxlator proto_encode --input config.json --type common.Config --output config.pb ============================"
      configtxlator proto_encode --input config.json --type common.Config --output config.pb
      echo "============================ Executing - configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb ============================"
      configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb
      echo "============================ Executing - configtxlator compute_update --channel_id {{ $ChannelName }} --original config.pb --updated modified_config.pb --output anchor_update.pb ============================"
      configtxlator compute_update --channel_id {{ $ChannelName }} --original config.pb --updated modified_config.pb --output anchor_update.pb
      echo "============================ Executing - configtxlator proto_decode --input anchor_update.pb --type common.ConfigUpdate | jq . > anchor_update.json ============================"
      configtxlator proto_decode --input anchor_update.pb --type common.ConfigUpdate | jq . > anchor_update.json
      echo '{"payload":{"header":{"channel_header":{"channel_id":"{{ $ChannelName }}", "type":2}},"data":{"config_update":'$(cat anchor_update.json)'}}}' | jq . > anchor_update_in_envelope.json
      echo "============================ configtxlator proto_encode --input anchor_update_in_envelope.json --type common.Envelope --output anchor_update_in_envelope.pb ============================"
      configtxlator proto_encode --input anchor_update_in_envelope.json --type common.Envelope --output anchor_update_in_envelope.pb
      echo "============================ Signing the Channel Configuration ============================"
      peer channel signconfigtx -f anchor_update_in_envelope.pb --connTimeout 20s
      echo "============================ Running peer channel update ============================"
      peer channel update -f anchor_update_in_envelope.pb -c {{ $ChannelName }} -o {{ .Values.orderer_endpoint }} --tls --cafile $ORDERER_CA --connTimeout 20s
      sleep 100000
      if [ $? -ne 0 ]; then
        echo "========================================= [ERROR] =============================================="
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
      else
        echo "========================================= [SUCCESS] =============================================="
        echo "[SUCCESS]::All steps have been executed successfully."
      fi
  anchorpeer.json: |
      {{- $length := sub (len .Values.anchor_peers) 1 }}
      [
        {{- range $index, $element := .Values.anchor_peers }}
        {{- $Member := ( printf "%s%s%s%s%s%s%s%s%s" "{" ("host" | quote)  ":" (.host | quote) "," ("port" | quote) ":" .port "}" ) }}
           {{ $Member }}
           {{- if lt $index $length }}
           {{","}}
           {{- end }}
        {{- end }}
      ]
  {{- end }}
{{- end }}
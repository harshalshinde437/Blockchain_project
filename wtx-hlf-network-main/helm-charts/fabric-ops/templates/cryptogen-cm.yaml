{{/*
Copyright National Payments Corporation of India. All Rights Reserved.
SPDX-License-Identifier:  GPL-3.0
*/}}

{{- if eq "crypto" .Values.job_type  }}

#{{- $TlsCaEndPoint   := .Values.tls.ca_endpoint }}
{{- $TlsCaPubCert    := .Values.tls.cert_path }}
{{- $OrdererBaseDir  := .Values.orderer_base_dir }}
{{- $HlfDomain       := .Values.hlf_domain }}
{{- $BaseDir         := .Values.base_dir }}
{{- $Project         := .Values.project }}
{{- $ChannelName     := .Values.hlf_channel }}
{{- $TlsCaEndPoint   := .Values.tls.k8s_ca_endpoint }}
{{- $k8s_HlfDomain   := .Values.k8s_hlf_domain }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-ops.fullname" $ }}-crypto-gen
  labels:
    {{- include "fabric-ops.labels" $ | nindent 4 }}
data:
  config.yaml: |
    NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: intermediatecerts/ca-cert.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: intermediatecerts/ca-cert.pem
        OrganizationalUnitIdentifier: peer
      AdminOUIdentifier:
        Certificate: intermediatecerts/ca-cert.pem
        OrganizationalUnitIdentifier: admin
      OrdererOUIdentifier:
        Certificate: intermediatecerts/ca-cert.pem
        OrganizationalUnitIdentifier: orderer
  enroll.sh: |
    function fabric_public_key_fetch() {

    FABRIC_CA_URL=$1
    FABRIC_TLS_CERT_FILE=$2

    while true; do
      http_response=$(curl -sL -w  "%{http_code}" "https://$FABRIC_CA_URL/cainfo" --insecure -o /dev/null)
      if [ "$http_response" -eq "200" ]; then
        echo "--------------------------------"
        echo "Fetching public key cert of https://$FABRIC_CA_URL, received HTTP response with 200."
        echo "--------------------------------"
          if curl https://$FABRIC_CA_URL/cainfo --insecure | jq .result.CAChain | base64 -i -d > $FABRIC_TLS_CERT_FILE; then
            echo "--------------------------------"
            echo "The downloaded public key cert of https://$FABRIC_CA_URL"
            echo "--------------------------------"
            cat $FABRIC_TLS_CERT_FILE
            break;
          else
            echo "There are some issues with fetching the public key using 'jq' OR 'curl' command."
          fi
      else
        echo "------------------------------------"
        echo "Fetching public key cert of https://$FABRIC_CA_URL, but received non 200 HTTP response $http_response. Cannot proceed without the public key cert. This process will retry until it gets 200 response from https://$FABRIC_CA_URL."
        echo "------------------------------------"
        sleep {{ .Values.retry_seconds | default 10 }}
      fi
    done
    }
    
    CertGenMsp() {
    
    FABRIC_CA_URL=$1
    FABRIC_IDENTITY=$2
    FABRIC_IDENTITY_SECRET=$3
    FABRIC_IDENTITY_MSP_DIR=$4
    FABRIC_TLS_CERT_FILE=$5

    while true; do
      echo "--------------------------------------------------------------------"
      echo "Enrolling to ICA https://$FABRIC_CA_URL as $FABRIC_IDENTITY"
      echo "--------------------------------------------------------------------"
      fabric-ca-client enroll \
       --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_CA_URL \
       --mspdir $FABRIC_IDENTITY_MSP_DIR \
       --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }} \
       --tls.certfiles $FABRIC_TLS_CERT_FILE
      if [ $? -eq 0 ]; then
          echo "--------------------------------------------------------------------"
          echo "Rearranging certificate directory structure for $FABRIC_IDENTITY"
          echo "--------------------------------------------------------------------"
          mkdir -p $FABRIC_IDENTITY_MSP_DIR/tlscacerts
          cp $FABRIC_IDENTITY_MSP_DIR/intermediatecerts/* $FABRIC_IDENTITY_MSP_DIR/intermediatecerts/ca-cert.pem
          cp $FABRIC_IDENTITY_MSP_DIR/cacerts/* $FABRIC_IDENTITY_MSP_DIR/cacerts/ca-cert.pem
          cp {{ $TlsCaPubCert }} $FABRIC_IDENTITY_MSP_DIR/tlscacerts/ca.crt
          cp /tmp/config.yaml $FABRIC_IDENTITY_MSP_DIR/config.yaml
          break;
      else
          echo "------------------------------------"
          echo "Cannot login with the given identity $FABRIC_IDENTITY"
          echo "------------------------------------"
          rm -rf $FABRIC_IDENTITY_MSP_DIR/*
          sleep {{ .Values.retry_seconds  | default 10 }}
      fi
    done         
    }


    CertGenTls() {
    
    FABRIC_CA_URL=$1
    FABRIC_IDENTITY=$2
    FABRIC_IDENTITY_SECRET=$3
    FABRIC_IDENTITY_MSP_DIR=$4
    FABRIC_TLS_CERT_FILE=$5
    FABRIC_IDENTITY_CSR_HOST=$6

    while true; do    
      echo "--------------------------------------------------------------------"
      echo "Enrolling to ICA https://$FABRIC_CA_URL as $FABRIC_IDENTITY"
      echo "--------------------------------------------------------------------"
      fabric-ca-client enroll \
        --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_CA_URL \
        --mspdir $FABRIC_IDENTITY_MSP_DIR \
        --enrollment.profile tls \
        --csr.hosts $FABRIC_IDENTITY_CSR_HOST \
        --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }} \
        --tls.certfiles $FABRIC_TLS_CERT_FILE
    
      if [ $? -eq 0 ]; then
        echo "--------------------------------------------------------------------"
        echo "Rearranging certificate directory structure for $FABRIC_IDENTITY"
        echo "--------------------------------------------------------------------"
        cp $FABRIC_IDENTITY_MSP_DIR/tlscacerts/* $FABRIC_IDENTITY_MSP_DIR/ca.crt
        cp $FABRIC_IDENTITY_MSP_DIR/signcerts/* $FABRIC_IDENTITY_MSP_DIR/server.crt
        cp $FABRIC_IDENTITY_MSP_DIR/keystore/* $FABRIC_IDENTITY_MSP_DIR/server.key 
        echo "--------------------------------------------------------------------"
        echo "Archiving $FABRIC_IDENTITY tls directory"
        echo "--------------------------------------------------------------------"
        tar -czvf {{ $BaseDir }}/ordererOrganizations/$FABRIC_IDENTITY/tls.tar.gz --directory={{ $BaseDir }}/ordererOrganizations/$FABRIC_IDENTITY/ tls
        sleep 5
        echo "--------------------------------------------------------------------"
        echo "Uploading $FABRIC_IDENTITY tls cert file {{ $BaseDir }}/ordererOrganizations/$FABRIC_IDENTITY/tls.tar.gz to filestore {{ .Values.filestore_endpoint }}"
        echo "--------------------------------------------------------------------"
        curl -T {{ $BaseDir }}/ordererOrganizations/$FABRIC_IDENTITY/tls.tar.gz {{ .Values.filestore_endpoint }}/{{ $Project }}/$FABRIC_IDENTITY-tls-certs.tar.gz {{- if .Values.filestore_ssl  }} --insecure {{- end }}
        if [ $? -eq 0 ]; then
            echo "Successfully uploaded $FABRIC_IDENTITY TLS cert file to filestore."
            sha256sum {{ $BaseDir }}/ordererOrganizations/$FABRIC_IDENTITY/tls.tar.gz
            echo "================== [SUCCESS] ===================="
            break;
        else
            echo "[ERROR]::Filestore upload failed, please re-run this job if necessary."
            echo "========================== [ERROR] ================================="
        fi
      else
        echo "------------------------------------"
        echo "Cannot login with the given identity $FABRIC_IDENTITY"
        echo "------------------------------------"
        rm -rf $FABRIC_IDENTITY_MSP_DIR/*
        sleep {{ .Values.retry_seconds  | default 10 }}
      fi
    done
     }

     fabric_public_key_fetch {{ $TlsCaEndPoint }} {{ $TlsCaPubCert }}
     {{- range .Values.orderer_identities }}
     {{- $msp_dir := printf "%s/%s/%s/%s" $BaseDir "ordererOrganizations" .identity_name "tls" }}
     {{- $csr_host := printf "%s,%s.%s,%s.%s" .identity_name .identity_name $HlfDomain .identity_name $k8s_HlfDomain }}
     CertGenTls {{ $TlsCaEndPoint }} {{ .identity_name }} {{ .identity_secret }} {{ $msp_dir }} {{ $TlsCaPubCert }} {{ $csr_host }}
     {{- end }}

     if [ $? -ne 0 ]; then
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary"
        echo "======================================================= [ERROR] ==========================================================="
     else
        echo "All TLS enrollment steps have been executed successfully."
        echo "==================== [SUCCESS] =========================="
     fi

     {{- range .Values.organizations }}
     {{- $msp_dir := printf "%s/%s/%s/%s" $BaseDir .dir_suffix .org_name "msp" }}
     fabric_public_key_fetch {{ .ca_endpoint }} {{ .cert_path }}
     CertGenMsp {{ .ca_endpoint }} {{ .ca_user }} {{ .ca_pass }} {{ $msp_dir }} {{ .cert_path }}
     {{- end }}
  
     if [ $? -ne 0 ]; then
        echo "[ERROR]::One of the previous step returned an error, please debug it manually using cli pod and re-run this job if necessary."
        echo "======================================================= [ERROR] ==========================================================="
     else
        echo "All MSP enrollment steps have been executed successfully."
        echo "==================== [SUCCESS] =========================="
     fi
  gen_artifacts.sh: |
     echo "--------------------------------------------------------------------"
     echo "Generating Genesis block file {{ .Values.block_file }} at {{ .Values.channel_artifact_dir }}/{{ .Values.block_file }}";
     echo "--------------------------------------------------------------------"
     configtxgen -profile SampleMultiNodeEtcdRaft -channelID {{ .Values.orderer_system_channel }} -outputBlock {{ .Values.channel_artifact_dir }}/{{ .Values.block_file }};
     sleep 5;
     echo "--------------------------------"
     echo "Printing generated {{ .Values.block_file }}"     
     echo "--------------------------------"
     cat {{ .Values.channel_artifact_dir }}/{{ .Values.block_file }}
     echo "--------------------------------"
     GENESIS_SHA=$(sha256sum {{ .Values.channel_artifact_dir }}/{{ .Values.block_file }})
     echo "SHA256 value = $GENESIS_SHA"
     echo "--------------------------------"

     echo "--------------------------------------------------------------------"
     echo "Generating Configuration transaction file {{ .Values.config_transaction_filename }} at {{ .Values.channel_artifact_dir }}/{{ .Values.config_transaction_filename }}";
     echo "--------------------------------------------------------------------"
     configtxgen -profile TwoOrgsChannel -outputCreateChannelTx {{ .Values.channel_artifact_dir }}/{{ .Values.config_transaction_filename }} -channelID {{ $ChannelName }};
     sleep 5
     echo "--------------------------------"
     echo "Printing generated {{ .Values.config_transaction_filename }}"
     echo "--------------------------------"
     cat {{ .Values.channel_artifact_dir }}/{{ .Values.config_transaction_filename }}
     echo "\n"
     echo "--------------------------------------------------------------------"
     CHANNELTX_SHA=$(sha256sum {{ .Values.channel_artifact_dir }}/{{ .Values.config_transaction_filename }})
     echo "SHA256 value = $CHANNELTX_SHA"
     echo "--------------------------------"
     echo "Uploading {{ .Values.block_file }} to filestore {{ .Values.filestore_endpoint }}"
     echo "--------------------------------------------------------------------"
     curl -T {{ .Values.channel_artifact_dir }}/{{ .Values.block_file }} {{ .Values.filestore_endpoint }}/{{ $Project }}/ {{- if .Values.filestore_ssl  }} --insecure {{- end }}
      if [ $? -ne 0 ]; then
        echo "[ERROR]::Filestore upload failed, please re-run this job if necessary."
        echo "========================== [ERROR] ================================="
      else
        echo "Successfully uploaded {{ .Values.block_file }} to filestore."
        echo "================== [SUCCESS] ===================="
      fi
     echo "--------------------------------------------------------------------"
     echo "Uploading {{ .Values.config_transaction_filename }} to filestore {{ .Values.filestore_endpoint }}"
     echo "--------------------------------------------------------------------"
     curl -T {{ .Values.channel_artifact_dir }}/{{ .Values.config_transaction_filename }} {{ .Values.filestore_endpoint }}/{{ $Project }}/ {{- if .Values.filestore_ssl  }} --insecure {{- end }}
      if [ $? -ne 0 ]; then        
        echo "[ERROR]::Filestore upload failed, please re-run this job if necessary."
        echo "========================== [ERROR] ================================="
      else
        echo "Successfully uploaded {{ .Values.config_transaction_filename }} to filestore."
        echo "================== [SUCCESS] ===================="
      fi
{{- end }}